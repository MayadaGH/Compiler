Program -> ClassDeclaration End

ClassDeclaration -> Category ID { Class_Implementation } 
	| Category ID Derive { Class_Implementation }

Class_Implementation -> VarDeclaration 
	| MethodDeclaration Class_Implementation 
	| Comment Class_Implementation 
	| using_command Class_Implementation
	| Func_Call  Class_Implementation 
	| EPSILON 
	
MethodDeclaration -> Func_Decl ;
	| Func_Decl { VarDeclaration  Statements }

Func_Decl -> Type ID ( ParameterList ) 

Type -> Ilap | Silap | Clop | Series | Ilapf | Silapf | None | Logical 

ParameterList -> EPSILON | None | Non-Empty-List 

Non-Empty-List -> Type ID Non-Empty-List' 

Non-Empty-List' -> , Type ID Non-Empty-List' | EPSILON	

VarDeclaration -> EPSILON | Type ID_List ; VarDeclaration 

ID_List -> ID ID_List'

ID_List' -> , ID ID_List' | EPSILON

Statements -> EPSILON | Statement  Statements 

Statement -> Assignment 
	| If_Statement 
	| Rotatewhen_Statement 
	| Continuewhen_Statement 
	| Replywith_Statement 
	| terminatethis_Statement
	| read ( ID ) ; 
	| write ( Expression ) ;
	
Assignment -> VarDeclaration = Expression;
 
Func_Call -> ID ( Argument_List ) ;

Argument_List -> EPSILON | NonEmpty_Argument_List

NonEmpty_Argument_List -> Expression NonEmpty_Argument_List' 

NonEmpty_Argument_List' -> , Expression NonEmpty_Argument_List' | EPSILON

Block_Statements -> { Statements }

If_Statement -> Tik ( Condition_Expression )  Block_Statements 
	| Tik ( Condition_Expression ) Block_Statements Flik Block_Statements
	
Condition_Expression -> Condition | Condition Condition_Op Condition 

Condition_Op -> and | or

Condition -> Expression Comparison_Op Expression
 
Comparison_Op -> == | != | > | >= | < | <= 

Rotate_Statement -> Rotate when( Condition_Expression ) Block_Statements
 
Continuewhen_Statement -> Continuewhen ( Expression ; Expression ; Expression ) Block_Statements

Replywith_Statement -> Replywith Expression ; | returnID ;

terminatethis_Statement -> terminatethis ;

Expression -> Term Expression'

Expression' -> Add_Op Term Expression' | EPSILON

Add_Op -> + | - 

Term -> Factor Term'

Term' -> Mul_Op Factor Term' | EPSILON

Mul_Op -> * | / 

Factor -> ID | Number

Comment -> #* STRING *# | -- STRING 

using_command -> using ( F_name.txt ) ;

F_name -> STRING 